#!/usr/bin/env ruby

require 'json'
require 'ostruct'
require 'awesome_print'
require 'uri'

def read_json_to_ostruct(file_name)
  JSON.parse(File.read(file_name), object_class: OpenStruct)
end

def read_json_to_hash(file_name)
  JSON.parse(File.read(file_name))
end

def hash_affordances(o)
  affs = o.affordances.map { |a| [(a.http_method || "GET"), a.return_type] }
  affordances_by_name = Hash[o.affordances.map(&:name).zip(affs)]
  hash = { "#{o.representation_uuid}": affordances_by_name }
end

def print_affordances(o)
  affordances_by_name = Hash[o.affordances.map(&:name).
                               zip(o.affordances.map(&:return_type))]
  hash = { "#{o.representation_uuid}": affordances_by_name }
  puts "#{o.representation_uuid.split('#').first} affordances:"
  ap hash
end

require 'active_support/inflector'
require 'thor'

DELIMITER = '#'
# http://www.graphviz.org/doc/info/colors.html
# https://en.wikipedia.org/wiki/Web_colors#HTML_color_names
HTTP_COLORS = {
  'DELETE' => 'red',
  'PUT' => 'blue',
  'POST' => 'purple'
}
HTTP_COLORS.default = 'green'
HTTP_COLORS.freeze

GENERIC_RESOURCE = /^:(.*)/

class Pica < Thor
  # NOTE: "special" means their name is generic and
  # thus we need to peek at the input/output rather
  # than rely on the link relation to specify
  SPECIAL_RESOURCES = ["self", "up", "root"]
  attr_accessor :app_name, :representations
  include Thor::Actions

  desc "g <directory of representations> <optional: app name>",
       "generates Sinatra app, uses default file name for app name if none given"
  option :force, :type => :boolean

  def self.source_root
    File.dirname(__FILE__)
  end

  def g(representations_dir, app_name = "ExamplePicaApp")
    @app_name = app_name
    resources = create_resources(representations_dir)
    create_app(routes_from(resources))
    create_rack_file
  end

  private
  def create_resources(representations_dir)
    resources = []
    link_relations = []
    @representations = {}
    Dir.glob("#{representations_dir}/*.json") do |json_file|
      json = read_json_to_ostruct(json_file)
      print_affordances(json)
      link_relations << hash_affordances(json)
      @representations[File.basename(json_file, ".*" )] = json_file
      @root = json["affordances"].find { |o| o.name == 'root' }
      resources << json["affordances"].select { |o| o.name != 'self' }
    end

    @link_relations = []
    graph = { nodes: [], edges: [] }
    link_relations.each do |e|
      e.values.first.each_pair do |k, v|
        next if SPECIAL_RESOURCES.include?(link_relation = k.split(DELIMITER).first)

        graph[:edges] << OpenStruct.new(
          {
            source: id = e.keys.first.to_s.split(DELIMITER).first,
            target: target = v[1].split(DELIMITER).first,
            label: link_relation,
            color: HTTP_COLORS[v[0]]
          }
        )
        @link_relations << OpenStruct.new(
          {
            input: id,
            output: target,
            direction: (v[0] === 'GET' ? 'none' : ''),
            color: HTTP_COLORS[v[0]],
            label: link_relation
          }
        )
      end
    end

    graph[:edges].each do |edge|
      id = edge.source
      graph[:nodes] << OpenStruct.new({id: id, name: id})
      id = edge.target
      graph[:nodes] << OpenStruct.new({id: id, name: id})
    end

    @nodes = graph[:nodes].uniq
    @edges = graph[:edges].uniq
    template('templates/cyto.erb', "#{app_name}/#{app_name}.json")

    template('templates/dot.erb', "#{app_name}/#{app_name}.dot")

    resources.flatten.reject {|o| GENERIC_RESOURCE.match(o.name) }.each do |r|
      @representation = r
      response = @representations[@representation.return_type.split(DELIMITER).first]
      if response
        @representation.response = read_json_to_hash(response)
      end

      if @representation.url_template.nil?
        @representation.url_template = @representation.url
      end

      unless @representation.url_template.nil?
        @representation.url_template = URI(@representation.url_template).path
      end

      if SPECIAL_RESOURCES.include?(r.name)
        name = r.return_type.split(DELIMITER).first
        @representation.name = name
      end

      template(
        'templates/resource.erb',
        "#{app_name}/resources/#{@representation.name}.rb"
      )
    end

    resources.compact.flatten.reject {|o| GENERIC_RESOURCE.match(o.name) }
  end

  def routes_from(resources)
    routes = resources.map do |r|
      OpenStruct.new(
        {
          file_name: "./resources/#{r.name}.rb",
          class_name: "#{r.name.classify}"
        }
      )
    end
    routes.compact.uniq
  end

  def create_app(routes)
    @routes = routes
    template('templates/app.erb', "#{app_name}/#{app_name}.rb")
  end

  def create_rack_file
    template('templates/rackup.erb', "#{app_name}/config.ru")
  end
end

Pica.start
