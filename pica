#!/usr/bin/env ruby

require 'json'
require 'ostruct'
require 'awesome_print'

def read_json(file_name)
  JSON.parse(File.read(file_name), object_class: OpenStruct)
end

def hash_affordances(o)
  affordances_by_name = Hash[o.affordances.map(&:name).
                               zip(o.affordances.map(&:return_type))]
  { "#{o.representation_uuid}": affordances_by_name }
end

def print_affordances(o)
  hash = hash_affordances(o)
  puts "#{o.representation_uuid.split(':').first} affordances:"
  ap hash
end

require 'active_support/inflector'
require 'thor'

class Pica < Thor
  SPECIAL_RESOURCES = ["self", "up"]
  attr_accessor :app_name
  include Thor::Actions

  desc "g <directory of representations> <optional: app name>",
       "generates Sinatra app, uses default file name for app name if none given"
  option :force, :type => :boolean

  def self.source_root
    File.dirname(__FILE__)
  end

  def g(representations_dir, app_name = "ExamplePicaApp")
    @app_name = app_name
    resources = create_resources(representations_dir)
    create_app(routes_from(resources))
    create_rack_file
  end

  private
  def create_resources(representations_dir)
    resources = []
    Dir.glob("#{representations_dir}/*.json") do |json_file|
      resources << read_json(json_file)["affordances"]
    end

    resources.flatten.each do |r|
      @representation = r
      if SPECIAL_RESOURCES.include?(r.name)
        name = r.return_type.split(':').first
        @representation.name = name
      end

      template(
        'templates/resource.erb',
        "#{app_name}/resources/#{@representation.name}.rb"
      )
    end

    resources.compact.flatten
  end

  def routes_from(resources)
    routes = resources.map do |r|
      OpenStruct.new(
        {
          file_name: "./resources/#{r.name}.rb",
          class_name: "#{r.name.classify}"
        }
      )
    end
    routes.compact.uniq
  end

  def create_app(routes)
    @routes = routes
    template('templates/app.erb', "#{app_name}/#{app_name}.rb")
  end

  def create_rack_file
    template('templates/rackup.erb', "#{app_name}/config.ru")
  end
end

Pica.start
